{"version":3,"sources":["EthStuff.js","networks.js","reportWebVitals.js","index.js"],"names":["walletProvider","walletSigner","contract","biconomy","networks","CONTRACT_ADDRESS","web3","createAlchemyWeb3","require","App","useState","currentAccount","setCurrentAccount","selectedAddress","setSelectedAddress","loading","setloading","setNetwork","passedTxnHash","init","a","window","ethereum","isMetaMask","Biconomy","ethers","providers","JsonRpcProvider","apiKey","debug","console","log","Web3Provider","getSigner","getAddress","userAddress","onEvent","READY","Contract","myNft","abi","getSignerByAddress","utils","Interface","ERROR","error","message","checkIfWalletIsConnected","handleChainChanged","_chainId","location","reload","request","method","accounts","length","account","chainId","on","connectWallet","alert","askContractToMintNft","provider","getEthersProvider","populateTransaction","mintNFT","data","myHash","glass","estimateGas","to","from","gasLimit","txParams","signatureType","send","tx","Swal","fire","icon","title","text","once","transaction","html","transactionHash","width","padding","color","background","backdrop","replay_tx","eth","call","pullCall","revertReason","useEffect","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08655c5e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './EthStuff.css';\r\nimport { ethers } from \"ethers\"\r\nimport { Biconomy } from \"@biconomy/mexa\";\r\nimport myNft from \"./GaslessTransactions.json\"\r\nimport {networks} from \"./networks\"\r\nimport Swal from 'sweetalert2'\r\n\r\nconst CONTRACT_ADDRESS = \"0x653d74cf90fDbd24b8B80cE87263080CED9cA306\"; //kovan mainnet\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"https://eth-kovan.alchemyapi.io/v2/ADXYfZxHoqDZPB5sMp-LA4LlHnlavdN1\"); \r\nlet ethersProvider, walletProvider, walletSigner\r\nlet contract, contractInterface\r\nlet biconomy\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [selectedAddress, setSelectedAddress] = useState('')\r\n  const [loading, setloading] = useState(false);\r\n  const [network, setNetwork] = useState('')\r\n\r\n  var passedTxnHash = ''\r\n\r\n  const init = async () => {\r\n    if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {  \r\n      biconomy = new Biconomy(new ethers.providers.JsonRpcProvider(\"https://eth-kovan.alchemyapi.io/v2/ADXYfZxHoqDZPB5sMp-LA4LlHnlavdN1\"), {\r\n        walletProvider: window.ethereum, \r\n        apiKey: '8FBNI6KMg.2d9fe647-e047-4088-a811-aee29e99cb25',\r\n        debug: true,\r\n      })\r\n      console.log(biconomy, \"checking\")\r\n\r\n      // two providers one with biconomy andd other for the wallet signing the transaction\r\n      ethersProvider = new ethers.providers.Web3Provider(biconomy)\r\n      walletProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n      walletSigner = walletProvider.getSigner()\r\n\r\n      let userAddress = await walletSigner.getAddress()\r\n      setSelectedAddress(userAddress)\r\n\r\n      // init dApp stuff like contracts and interface\r\n      biconomy\r\n        .onEvent(biconomy.READY, async () => {\r\n          contract = new ethers.Contract(\r\n            CONTRACT_ADDRESS,\r\n            myNft.abi,\r\n            biconomy.getSignerByAddress(userAddress)\r\n          )\r\n\r\n          contractInterface = new ethers.utils.Interface(myNft.abi)\r\n          setloading(false)\r\n          // setInitLoading(1)\r\n        })\r\n        .onEvent(biconomy.ERROR, (error, message) => {\r\n          console.log(message)\r\n          console.log(error)\r\n        })\r\n    } else {\r\n      console.log('Metamask not installed')\r\n    }\r\n  }\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account)      \r\n    } else {\r\n      console.log(\"No authorized account found\")\r\n    }\r\n\r\n    // This is the new part, we check the user's network chain ID\r\n    const chainId = await ethereum.request({ method: 'eth_chainId' })\r\n    setNetwork(networks[chainId])\r\n    ethereum.on('chainChanged', handleChainChanged)\r\n\r\n    function handleChainChanged(_chainId) {\r\n      window.location.reload()\r\n    }\r\n  }\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);      \r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }  \r\n\r\n  const askContractToMintNft = async () => {\r\n    try {\r\n      if(currentAccount !== ''){\r\n      setloading(true)\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        let userAddress = selectedAddress          \r\n          \r\n        console.log(biconomy)\r\n          let provider = biconomy.getEthersProvider();\r\n          let { data } = await contract.populateTransaction.mintNFT();\r\n          const myHash = data\r\n          const glass = () => {   //used to pass it as a global variabe for the catch to display the revert reason       \r\n            passedTxnHash = myHash  \r\n            return passedTxnHash          \r\n          }\r\n          glass()\r\n          let gasLimit = await provider.estimateGas({\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            data: data\r\n          });\r\n          console.log(\"Gas limit : \", gasLimit);\r\n\r\n          let txParams = {\r\n            data: data,\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            gasLimit: 10000000,\r\n            signatureType: \"EIP712_SIGN\"\r\n          };\r\n          console.log(txParams)\r\n\r\n          let tx\r\n          try {\r\n            tx = await provider.send(\"eth_sendTransaction\", [txParams])\r\n          }\r\n          catch (err) {\r\n            if(err.message == \"MetaMask Message Signature: User denied message signature.\"){\r\n              Swal.fire({\r\n                icon: 'error',\r\n                title: 'Minting Failed',\r\n                text: 'Minting failed, you rejected the transaction, try again',         \r\n              }) \r\n              setloading(false) \r\n              return 0;\r\n            }else{\r\n              Swal.fire({\r\n                icon: 'error',\r\n                title: 'Minting Failed, try again in a moment',                           \r\n              })\r\n            }      \r\n          }         \r\n          console.log(\"Transaction hash : \", tx);\r\n          provider.once(tx, (transaction) => {\r\n            console.log(transaction, \"emited\");\r\n            setloading(false)\r\n            Swal.fire({\r\n              title: 'Minting successful',\r\n              html:\r\n                'Check your transaction below' +\r\n                `<a href=' https://kovan.etherscan.io/tx/${transaction.transactionHash}' target=\"_blank\"> https://kovan.etherscan.io/</a> ` +\r\n                '',\r\n              width: 600,\r\n              padding: '3em',\r\n              color: '#000000',\r\n              background: '#fff',\r\n              backdrop: `\r\n                rgba(0,0,0,0.4)                \r\n                left top\r\n                no-repeat\r\n              `\r\n            })\r\n          });\r\n\r\n          console.log(\"Going to pop wallet now to pay gas...\")\r\n          console.log(\"Mining...please wait.\")\r\n          \r\n       \r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    }else{\r\n      Swal.fire(\r\n        'Connect wallet',\r\n        'Before minting you must connect your wallet',\r\n        'question'\r\n      )\r\n    }\r\n      \r\n    } catch (error) {\r\n      setloading(false)\r\n\r\n      //sending an eth call to get the revert reason\r\n      let replay_tx = {\r\n        to: CONTRACT_ADDRESS,\r\n        from: currentAccount,        \r\n        data: passedTxnHash,\r\n      }      \r\n        \r\n      try{\r\n        const pullCall = await web3.eth.call(replay_tx)\r\n        console.log(\"Working ok\", pullCall)\r\n      }catch (error){        \r\n        console.log(\"my own error\" ,error.data) \r\n        var revertReason = error.data;   \r\n        if(revertReason == \"Reverted 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001d4f6e6c792031204e465420616c6c6f776564207065722077616c6c6574000000\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'Cannot mint more than 1 NFT',\r\n           \r\n          })          \r\n        }else if(revertReason == \"Reverted 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001d7075626c69632073616c6520686173206e6f7420626567756e20796574000000\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'Sale has not begun yet',\r\n           \r\n          })\r\n        }else if(revertReason == \"Reverted 0x08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000154e6f7420656e6f756768204e465473206c656674210000000000000000000000\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'All the NFTs are sold out',\r\n           \r\n          })\r\n        }else{\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'Please try again',\r\n           \r\n          })   \r\n        }       \r\n      }      \r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    if(currentAccount !== ''){\r\n      setloading(true)\r\n    }\r\n\r\n    if (currentAccount !== '') {\r\n      console.log('init')\r\n      init()\r\n    }\r\n  }, [currentAccount])\r\n\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button onClick={connectWallet} className=\"josh\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        loading ?\r\n          <div className=\"loading\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n          :\r\n          \"\"}\r\n      <div className={loading ? \"container disabledbutton\" : \"container\"}>\r\n        \r\n          <div className=\"container\">\r\n            {currentAccount === \"\" ? (\r\n              renderNotConnectedContainer()\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n       \r\n        <div className=\"container2\">\r\n          <div className=\"row body\">\r\n            <div className=\"col-md-6 tesboddy ff\">   \r\n              <div className=\" mint_div \">\r\n                <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\r\n                  Claim free gasless NFT\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6 ff\">\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","const networks = {\r\n    '0x1': 'Mainnet',\r\n    '0x3': 'Ropsten',\r\n    '0x2a': 'Kovan',\r\n    '0x4': 'Rinkeby',\r\n    '0x5': 'Goerli',\r\n    '0x61': 'BSC Testnet',\r\n    '0x38': 'BSC Mainnet',\r\n    '0x89': 'Polygon Mainnet',\r\n    '0x13881': 'Polygon Mumbai Testnet',\r\n    '0xa86a': 'AVAX Mainnet',\r\n  }\r\n  \r\n  export { networks }","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport EthStuff from './EthStuff'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <EthStuff />    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}